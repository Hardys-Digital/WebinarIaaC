AWSTemplateFormatVersion: '2010-09-09'
Description: This script creates a multi-subnet VPC infrastructure with
  managed NAT gateways and Security Groups.

Metadata:
  Author: filipkamenar@hardysdigital.com

#    *********************************************************************************
#    ********************             Parameters                  ********************
#    *********************************************************************************
Parameters:
  ManagedResourcePrefix:
    Type: String
    Description: 'Prefix for the managed resources'
    Default: ''

  DeploymentEnvironment:
    Type: String
    Description: 'Specify whether the environment is prod or test'
    Default: 'test'
    AllowedValues:
      - 'prod'
      - 'test'

  AvailabilityZone:
    Type: String
    Description: 'AZ where resources will be deployed.'
    Default: 'eu-central-1a'

  VPCCIDR:
    Type: String
    Description: 'CIDR block for the VPC'
    Default: '10.20.0.0/16'

  PrivateSubnetCIDR:
    Type: String
    Description: 'CIDR block for private subnet 1 located in Availability Zone 1'
    Default: '10.20.0.0/19'

  PublicSubnetCIDR:
    Type: String
    Description: 'CIDR block for the public DMZ subnet 1 located in Availability Zone 1'
    Default: '10.20.128.0/20'

  LogsRetentionInDays:
    Type: Number
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]
    Default: 30

  myDomainName:
    Type: String
    Description: 'Name of the domain name used for DHCP options'
    Default: 'webinar.domain'

  myDomainNameServer:
    Type: String
    Description: 'Domain name server used for DHCP options'
    Default: '10.20.30.1'

#    *********************************************************************************
#    ********************        Definition of Network            ********************
#    *********************************************************************************
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-VPC
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref 'myDomainName'
      DomainNameServers:
        - !Ref 'myDomainNameServer'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-DHCPoptionsSet
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-InternetGateway
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

#    *********************************************************************************
#    ********************               Subnets                   ********************
#    *********************************************************************************
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnetCIDR'
      AvailabilityZone: !Ref 'AvailabilityZone'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PrivateSubnet
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnetCIDR'
      AvailabilityZone: !Ref 'AvailabilityZone'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PublicSubnet
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref DeploymentEnvironment

#    *********************************************************************************
#    ********************               Routing                   ********************
#    *********************************************************************************
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PrivateSubnetRouteTable
        - Key: Network
          Value: Private
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway'

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PublicSubnetRouteTable
        - Key: Network
          Value: Public
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      RouteTableId: !Ref 'PublicSubnetRouteTable'

#    *********************************************************************************
#    ********************                   NAT                   ********************
#    *********************************************************************************
  NATEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-NATEIP
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATEIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-NATGateway
        - Key: Environment
          Value: !Ref DeploymentEnvironment

#    *********************************************************************************
#    ********************             Access Lists                ********************
#    *********************************************************************************
#    ********************             Private                     ********************
  PrivateSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PrivateSubnet1Acl
        - Key: Environment
          Value: !Ref 'DeploymentEnvironment'

  PrivateSubnetAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PrivateSubnetAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref 'PublicSubnetCIDR'

  PrivateSubnetAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnetAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PrivateSubnetACLassociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'PrivateSubnetAcl'
      SubnetId: !Ref 'PrivateSubnet'

#    ********************             Public                     ********************
  PublicSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${ManagedResourcePrefix}-PublicSubnetAcl
        - Key: Environment
          Value: !Ref 'DeploymentEnvironment'

  PublicSubnetAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicSubnetAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PublicSubnetAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      NetworkAclId: !Ref 'PublicSubnetAcl'
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  PublicSubnetACLassociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref 'PublicSubnetAcl'
      SubnetId: !Ref 'PublicSubnet'

#    *********************************************************************************
#    ********************         Security Groups                 ********************
#    *********************************************************************************
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ManagedResourcePrefix}-WebServerSecurityGroup'
      GroupDescription: 'SSH, HTTP and HTTPs access from internet'
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
          Description: 'allow ssh from internet'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
          Description: 'allow http from internet'
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
          Description: 'allow https from internet'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'allow all outcoming traffic'
      Tags:
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  DatabaseSG:
    DependsOn: WebServerSG
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ManagedResourcePrefix}-DatabaseSecurityGroup'
      GroupDescription: !Sub 'Allow connection for to MySQL and MSSQL db'
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt WebServerSG.GroupId
          Description: 'allow MySQL traffic from WebServerSG'
        - IpProtocol: 'tcp'
          FromPort: '1433'
          ToPort: '1433'
          SourceSecurityGroupId: !GetAtt WebServerSG.GroupId
          Description: 'allow MSSQL traffic from WebServerSG'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'allow all outcoming traffic'
      Tags:
        - Key: Environment
          Value: !Ref DeploymentEnvironment

#    *********************************************************************************
#    ********************               Logging                   ********************
#    *********************************************************************************
  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ManagedResourcePrefix}-VPCLogGroup
      RetentionInDays: !Ref 'LogsRetentionInDays'

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allow Resource * for CloudWatch Logs API since the resources are customer defined."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'VPCFlowLogsRole.Arn'
      LogGroupName: !Ref 'VPCFlowLogsLogGroup'
      ResourceId: !Ref 'VPC'
      ResourceType: VPC
      TrafficType: ALL

#    *********************************************************************************
#    ********************         Output data from script         ********************
#    *********************************************************************************
Outputs:
  VPCCIDR:
    Value: !Ref 'VPCCIDR'
    Description: 'VPC CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'

  VPCID:
    Value: !Ref 'VPC'
    Description: 'VPC ID'
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  VPCRegion:
    Value: !Ref 'AWS::Region'
    Description: VPC Region
    Export:
      Name: !Sub '${AWS::StackName}-VPCRegion'

  NATEIP:
    Description: 'NAT IP address'
    Value: !Ref 'NATEIP'
    Export:
      Name: !Sub '${AWS::StackName}-NATEIP'

  PrivateSubnetCIDR:
    Description: 'Private subnet CIDR'
    Value: !Ref 'PrivateSubnetCIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetCIDR'

  PrivateSubnetID:
    Description: 'Private subnet ID'
    Value: !Ref 'PrivateSubnet'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetID'

  PublicSubnetCIDR:
    Description: 'Public subnet CIDR'
    Value: !Ref 'PublicSubnetCIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetCIDR'

  PublicSubnetID:
    Description: 'Public subnet ID'
    Value: !Ref 'PublicSubnet'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetID'

  PrivateSubnetRouteTable:
    Value: !Ref 'PrivateSubnetRouteTable'
    Description: 'Private subnet route table'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetRouteTable'

  PublicSubnetRouteTable:
    Value: !Ref 'PublicSubnetRouteTable'
    Description: 'Public subnet route table'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetRouteTable'

  PrivateSubnetAcl:
    Value: !Ref 'PrivateSubnetAcl'
    Description: 'Private subnet ACL'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetAcl'

  PublicSubnetAcl:
    Value: !Ref 'PublicSubnetAcl'
    Description: 'Public subnet ACL'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetAcl'

  WebServerSG:
    Value: !GetAtt WebServerSG.GroupId
    Description: 'WebServer security group ID'
    Export:
      Name: !Sub '${AWS::StackName}-WebSecurityGroupID'

  DatabaseSG:
    Value: !GetAtt DatabaseSG.GroupId
    Description: 'Database security group ID'
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecurityGroupID'